* excercise 1.1
#+begin_src scheme
    10
#+end_src

#+RESULTS:
: 10

#+begin_src scheme
  (+ 5 3 4)
#+end_src

#+RESULTS:
: 12

#+begin_src scheme
  (- 9 1)
#+end_src

#+RESULTS:
: 8

#+begin_src scheme
  (/ 6 2)
#+end_src

#+RESULTS:
: 3

#+begin_src scheme
  (+ (* 2 4) (- 4 6))
#+end_src

#+RESULTS:
: 6

#+begin_src scheme :session :results silent
  (define a 3)
  (define b (+ a 1))
#+end_src


#+begin_src scheme :session
  (+ a b (* a b))
#+end_src

#+RESULTS:
: 19

#+begin_src scheme :session
  (= a b)
#+end_src

#+RESULTS:
: #f

#+begin_src scheme :session
  (if (and (> b a) (< b (* a b)))
      b
      a)
#+end_src

#+RESULTS:
: 4

#+begin_src scheme :session
  (cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25))
#+end_src

#+RESULTS:
: 16

#+begin_src scheme :session
  (+ 2 (if (> b a) b a))
#+end_src

#+RESULTS:
: 6

#+begin_src scheme :session
  (* (cond((> a b) a)
          ((< a b) b)
          (else -1))
     (+ a 1))
#+end_src

#+RESULTS:
: 16

* excercise 1.2
#+begin_src scheme
  (/ (+ 5
        4
        (- 2 (- 3 (+ 6 (/ 4 5)))))
     (* 3 (- 6 2) (- 2 7)))
#+end_src

#+RESULTS:
: -37/150

* excercise 1.3
#+begin_src scheme :session :results silent
  (define (sum-of-squares a b) (+ (* a a) (* b b)))
  (define (f a b c)
    (cond ((= (min a b c) a) (sum-of-squares b c))
          ((= (min a b c) b) (sum-of-squares a c))
          ((= (min a b c) c) (sum-of-squares a b))))
#+end_src

* excercise 1.4
#+begin_src python 
  if b > 0:
      return a + b
  else:
      return a - b
#+end_src

#+RESULTS:

* excercise 1.5
** applicative-order
   The arguments ~0~ and ~(p)~ will be evaluated before
   the body of the procedure is interpreted. The program
   will hang indefinitely when evaluating ~(p)~ because it
   simply evaluates to itself resulting in infinite
   recursion.
  
** normal-order
   The arguments will not be evaluated until final
   expression for the body is assembled. The ~if~ condition
   is true, so the final expression is simply 0; ~(p)~ is
   never evaluated and the program exits normally.

* excercise 1.6 
#+begin_src scheme :session :results silent
  (define (square x) (* x x))

  (define (good-enough? guess x)
    (< (abs (- x (square guess))) .0001))

  (define (improve guess x)
    (/ (+ guess (/ x guess)) 2))

  (define (new-if predicate then-clause else-clause)
    (cond (predicate then-clause)
          (else else-clause)))

  (define (sqrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))

  (define (new-sqrt-iter guess x)
    (new-if (good-enough? guess x)
            guess
            (new-sqrt-iter (improve guess x) x)))

  (define (sqrt x)
    (sqrt-iter 1 x))

  (define (new-sqrt x)
    (new-sqrt-iter 1 x))
#+end_src

~new-sqrt~ hangs and then gives a memory error. This is
because ~new-if~ is a function, so it's arguments are
evaluated when it is called. The else-clause argument
is the result of the previous iteration, and is evaluated
even when the predicate good-enough? is true, so the
recursion never terminates.

* excercise 1.7
For small numbers, the arbitrary value of  .0001 is
is too large to give an accurate result. For large
numbers, the inaccuracy due to limited precision
may exceed .0001, so the program will not reliably
converge.

#+begin_src scheme :session
  (sqrt-iter 1e-3 1e-4)
#+end_src

#+RESULTS:
: 0.001

#+begin_src scheme :session
  (square .001)
#+end_src

#+RESULTS:
: 1e-06


#+begin_src scheme :session
  (sqrt-iter 1e90 1e+200)
#+end_src

#+RESULTS:
: 1e+100

#+begin_src scheme :session
  (square 1e100) ; hmm, this seems to work fine
#+end_src

#+RESULTS:
: 1e+200

#+begin_src scheme :session :results silent
  (define (good-enough2? guess last-guess x)
    (<
     (/ (abs (- guess last-guess))
        x)
    .0001))

  (define (sqrt-iter2 guess last-guess x)
    (if (good-enough2? guess last-guess x)
        guess
        (sqrt-iter2 (improve guess x) guess x)))

  (define (sqrt2 x)
    (sqrt-iter2 1 (abs (- 1 x)) x))
#+end_src


#+begin_src scheme :session
  (square (sqrt2 1e-8))
#+end_src

#+RESULTS:
: 9.999999999999999e-09

#+begin_src scheme :session
  (/ (square (sqrt2 1e8)) 1e8)
#+end_src

#+RESULTS:
: 1.163074839374683

* excercise 1.8
#+begin_src scheme :session :results silent
  (define (cbrt-improve guess x)
    (/ (+ (/ x (square guess))
          (* 2 guess))
       3))

  (define (cbrt-iter guess last-guess x)
    (if (good-enough2? guess last-guess x)
        guess
        (cbrt-iter (cbrt-improve guess x) guess x)))

  (define (cbrt x)
    (cbrt-iter 1 (abs (- 1 x)) x))

  (define (cube x)
    (* x x x))
#+end_src

#+begin_src scheme :session
  (cube (cbrt 5))
#+end_src

#+RESULTS:
: 53424961068499785232576730484961888082506441264081851503057731933303288827851761255767560550203451372890378266524748011611193001843352745768025987441718315878847487893761779907830641757763683666556537662274384600883109109468480576511493974161327404241543/10684992136738961827682364144582307949972355443707634615914444004841996229362015242332163381568578969877161798877711900676929439028427030837298423552681177010183183855403827672701863703617582204591686036568939901062261862271736636671516863362766031792667

uhmmm yikes
