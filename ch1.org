* excercise 1.1
#+begin_src scheme
  10
#+end_src

#+RESULTS:
: 10

#+begin_src scheme
  (+ 5 3 4)
#+end_src

#+RESULTS:
: 12

#+begin_src scheme
  (- 9 1)
#+end_src

#+RESULTS:
: 8

#+begin_src scheme
  (/ 6 2)
#+end_src

#+RESULTS:
: 3

#+begin_src scheme
  (+ (* 2 4) (- 4 6))
#+end_src

#+RESULTS:
: 6

#+begin_src scheme :session :results silent
  (define a 3)
  (define b (+ a 1))
#+end_src


#+begin_src scheme :session
  (+ a b (* a b))
#+end_src

#+RESULTS:
: 19

#+begin_src scheme :session
  (= a b)
#+end_src

#+RESULTS:
: #f

#+begin_src scheme :session
  (if (and (> b a) (< b (* a b)))
      b
      a)
#+end_src

#+RESULTS:
: 4

#+begin_src scheme :session
  (cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25))
#+end_src

#+RESULTS:
: 16

#+begin_src scheme :session
  (+ 2 (if (> b a) b a))
#+end_src

#+RESULTS:
: 6

#+begin_src scheme :session
  (* (cond((> a b) a)
          ((< a b) b)
          (else -1))
     (+ a 1))
#+end_src

#+RESULTS:
: 16

* excercise 1.2
#+begin_src scheme
  (/ (+ 5
        4
        (- 2 (- 3 (+ 6 (/ 4 5)))))
     (* 3 (- 6 2) (- 2 7)))
#+end_src

#+RESULTS:
: -37/150

* excercise 1.3
#+begin_src scheme :session :results silent
  (define (sum-of-squares a b)
    (+ (* a a) (* b b)))

  (define (f a b c)
    (cond ((= (min a b c) a) (sum-of-squares b c))
          ((= (min a b c) b) (sum-of-squares a c))
          ((= (min a b c) c) (sum-of-squares a b))))
#+end_src

* excercise 1.4
#+begin_src python :eval never
  if b > 0:
      return a + b
  else:
      return a - b
#+end_src

#+RESULTS:

* excercise 1.5
** applicative-order
   The arguments ~0~ and ~(p)~ will be evaluated before the body of the
   procedure is interpreted. The program will hang indefinitely when evaluating
   ~(p)~ because it simply evaluates to itself resulting in infinite recursion.
  
** normal-order
   The arguments will not be evaluated until final expression for the body is
   assembled. The ~if~ condition is true, so the final expression is simply 0;
   ~(p)~ is never evaluated and the program exits normally.

* excercise 1.6
#+begin_src scheme :session :results silent
  (define (square x) (* x x))

  (define (good-enough? guess x)
    (< (abs (- x (square guess))) .0001))

  (define (improve guess x)
    (/ (+ guess (/ x guess)) 2))

  (define (new-if predicate then-clause else-clause)
    (cond (predicate then-clause)
          (else else-clause)))

  (define (sqrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))

  (define (new-sqrt-iter guess x)
    (new-if (good-enough? guess x)
            guess
            (new-sqrt-iter (improve guess x) x)))

  (define (sqrt x)
    (sqrt-iter 1.0 x))

  (define (new-sqrt x)
    (new-sqrt-iter 1.0 x))
#+end_src

~new-sqrt~ hangs and then gives a memory error. This is because ~new-if~ is a
function, so it's arguments are evaluated when it is called. The else-clause
argument is evaluated even when the predicate ~good-enough?~ is true, so the
recursion never terminates.

* excercise 1.7
For small numbers, the arbitrary value of .0001 is is too large to give an
accurate result. For large numbers, the inaccuracy due to limited precision may
exceed .0001, so the program will not reliably converge.
** examples
*** inaccurate for small numbers:
   #+begin_src scheme :session
     (square (sqrt 1e-4))
   #+end_src

   #+RESULTS:
   : 0.00013631669067247127

*** hangs for big numbers
   #+begin_src scheme :session :eval never
     (sqrt 1e50)
   #+end_src

** improved implementation
   #+begin_src scheme :session :results silent
     (define (good-enough2? guess last-guess x)
       (if (eq? last-guess '())
           #f
           (let ((diff (abs (- guess last-guess))))
             (< (/ diff x) .0001))))

     (define (sqrt-iter2 guess last-guess x)
       (if (good-enough2? guess last-guess x)
           guess
           (sqrt-iter2 (improve guess x) guess x)))

     (define (sqrt2 x)
       (sqrt-iter2 1.0 '() x))
   #+end_src
*** let's try it out...
**** medium numbers
     it works!
     #+begin_src scheme :session
       (sqrt2 9)
     #+end_src

     #+RESULTS:
     : 3.000000001396984

     #+begin_src scheme :session
       (sqrt2 100)
     #+end_src

     #+RESULTS:
     : 10.000000000139897
 
**** small numbers
     accuracy issues addressed!
     #+begin_src scheme :session
       ;; (square (sqrt2 0.00001))
       (square (sqrt2 0.00001))
     #+end_src

     #+RESULTS:
     : 1e-05

**** big numbers
     no longer hangs!
     #+begin_src scheme :session
       (square (sqrt2 1e6))
     #+end_src

     #+RESULTS:
     : 1001108.0488810338

* excercise 1.8
#+begin_src scheme :session :results silent
  (define (cbrt-improve guess x)
    (/ (+ (/ x (square guess))
          (* 2 guess))
       3))

  (define (cbrt-iter guess last-guess x)
    (if (good-enough2? guess last-guess x)
        guess
        (cbrt-iter (cbrt-improve guess x) guess x)))

  (define (cbrt x)
    (cbrt-iter 1.0 '() x))

  (define (cube x)
    (* x x x))
#+end_src

#+begin_src scheme :session
  (cube (cbrt 9))
#+end_src

#+RESULTS:
: 9.00000000242235

* excercise 1.9
** v1
   #+begin_src scheme :eval never
     (+ 4 5)
     (inc (+ 3 5))
     (inc (inc (+ 2 5))) 
     (inc (inc (inc (+ 1 5))))
     (inc (inc (inc (inc (+ 0 5)))))
     (inc (inc (inc (inc 5))))
     (inc (inc (inc 6)))
     (inc (inc 7))
     (inc 8)
     9
   #+end_src
   this is a recursive process
** v2
   #+begin_src scheme
     (+ 4 5)
     (+ 3 6)
     (+ 2 7)
     (+ 1 8)
     (+ 0 9)
     9
   #+end_src
   this is an iterative process

* excercise 1.10
** (A 1 10)
   #+begin_src scheme :eval never
     (A 1 10)
     (A 0 (A 1 9))
     (A 0 (A 0 (A 1 8)))
     (A 0 (A 0 (A 0 (A 1 7))))
     (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 32)))))
     (A 0 (A 0 (A 0 (A 0 64))))
     (A 0 (A 0 (A 0 128)))
     (A 0 (A 0 256))
     (A 0 512)
     1024  ;; 2^10
   #+end_src
** (A 2 4)
   #+begin_src scheme :eval never
     (A 2 4)
     (A 1 (A 2 3))
     (A 1 (A 1 (A 2 2)))
     (A 1 (A 1 (A 1 (A 2 1))))
     (A 1 (A 1 (A 1 2)))
     (A 1 (A 1 4))  ;; (A 1 x) -> 2^x
     (A 1 16)
     65536  ;; 2^16  
   #+end_src
** (A 3 3) 
   #+begin_src scheme
     (A 3 3)
     (A 2 (A 3 2))
     (A 2 (A 2 (A 3 1)))
     (A 2 (A 2 2))
     (A 2 (A 1 (A 2 1)))
     (A 2 (A 1 2))
     (A 2 4)
     65536  ;; 2^16  
   #+end_src

  | proc | expression         |
  |------+--------------------|
  | f    | 2n                 |
  | g    | 2^n                |
  | h    | 2^2...^2 (n times) |
   
   
